void lisaskyloc(double t, double *params, double *thetaL, double *phiL);
double SNRFast(double *params);
void FisherPlot(int ll, double Tend, double *params);
void pbt_shift(double *corr, double *corrf, double *data1, double *data2, double *Sn, int n);
double log_likelihood_max_dual(int ll, double *A, double *E, double *params, double *SN, int N);
void InChl(int ll, double *params, double **Fisher, double **iChl);
void Ext_In(int ll, double *params, double **Fisher, double **eChl, double **iChl);
void Hetrodyne(int ll, double Tend, double *params, long N, double *ATR, double *ATI, double *ETR, double *ETI, double *AD, double *ED, double *SN);
double nh(int ll, double Tend, double *params, double *ATR, double *ATI, double *ETR, double *ETI, int NF, double *FF, double *AP, double *EP, double *FN, double *ASD);
double ndh(int ll, double Tend, double *params, double *ATR, double *ATI, double *ETR, double *ETI, int NF, double *FF, double *AA, double *EE, double *AP, double *EP, double *FN, double *ASD);
double tvol(double *params);
void cholesky(double **A, double **C, int N);
void ang2pix_ring( const long nside, double theta, double phi, long *ipix);
void pix2ang_ring( long nside, long ipix, double *theta, double *phi);
int *int_vector(int N);
void free_int_vector(int *v);
double **double_matrix(int N, int M);
void free_double_matrix(double **m, int N);
int **int_matrix(int N, int M);
void free_int_matrix(int **m, int N);
double *double_vector(int N);
void free_double_vector(double *v);
void FisherFastPE(double *params);
double ***double_tensor(int N, int M, int L);
void free_double_tensor(double ***t, int N, int M);
void Inverse(double **M, double **IM, int d);
void instrument_noise(double f, double *SAE, double *SXYZ);
void spacecraft(double t,  double *x, double *y, double *z);
void RAantenna(double *params, int NF, double *TF, double *FF, double *xi, double *FpAR, double *FpAI, double *FcAR, double *FcAI,
               double *FpER, double *FpEI, double *FcER, double *FcEI);
void RAfilters(double *params, int NF, double *TF, double *FF, double *xi, double *FpAR, double *FpAI, double *FcAR, double *FcAI,
               double *FpER, double *FpEI, double *FcER, double *FcEI);
void ResponseFreq(int ll, double Tend, double *params, long N, double *AS, double *ES);
void ResponseFast(int ll, double Tend, double *params, long N, double *AS, double *ES);
void timearray(double *params, RealVector *freq, long N, double *TF, AmpPhaseFDWaveform *ap);
double fourier_nwip(double *a, double *b, double *Sn, int n);
double FofT(int ll, double Tend, double *params, double tref);
void StartStop(int ll, double *params, double Tseg, double tstart, double tstop, double *fstart, double *fstop, double *frg);
void getfreq(double Tend, double *fnew, double *tf, double *Amp, double *Phase, double t, double fguess, double phic, double fRef_in, double m1_SI, double m2_SI, double chi1, double chi2, double distance, double tc);
void update(int k, int ll, double Tend, double *logLx, double *nhx, double **paramx, double **paramy, double *min, double *max, int *who, double *heat, double ***history, double *SN, double **ejump, double ***evec, double **ejumpI, double ***evecI, double **diag, double ***iChl, double tm, int NH, int NF, double *FF, double *AA, double *EA, double *AP, double *EP, int **cv, int **av, double *ATR, double *ATI, double *ETR, double *ETI, double *FN, double *ASD, gsl_rng *r);
void MCMC(double *params, double Tend, long N, double *AD, double *ED, double *SN);
double Likelihood(int ll, double Tend, double *params, long N, double *AD, double *ED, double *SN);
double LikelihoodDeltaMaxT(int ll, double Tend, double *params, int NF, double *FF, double *AA, double *EA, double *AP, double *EP, double *SN);
double LikelihoodDeltaMax(int ll, double Tend, double *params, int NF, double *FF, double *AA, double *EA, double *AP, double *EP, double *SN);
double LikelihoodDelta(int ll, double Tend, double *params, int NF, double *FF, double *AA, double *EA, double *AP, double *EP, double *SN);
double LikelihoodFstat(int ll, double Tend, double *params, double tm, int NF, double *FF, double *AA, double *EA, double *AP, double *EP, double *SN);
void FisherEvec(double **fish, double *ej, double **ev, int d);
void FisherEvecSVD(double **fish, double *ej, double **ev, int d);
void FisherEvecSplit(double **fish, double *ej, double **ev, int d);
void fourier_nwip_time(double *abt, double *a, double *b, double *Sn, int n);
void fourier_nwip_dual_time(double *abt, double *aA, double *bA, double *aE, double *bE, double *Sn, int n);
void FstatRA(int ll, double Tend, double *params, double *pnew, int NF, double *FF, double *TF, double *PF, double *AF, double *AAmp, double *EAmp, double *APhase, double *EPhase, double *SN);
void FisherDirect(int ll, double Tend, double *params, double **Fisher, double *SN);
void FisherDirectShift(int ll, double Tend, double *params, double **Fisher, double *SN);
void FstatFull(int ll, double Tend, double *params, double *pnew, int N, double *AC, double *EC, double *SN);
void FisherSub(int ll, double Tend, int *pmap, double *params, double **Fisher);
void FisherFast(int ll, double Tend, double *params, double **Fisher);
void Intrinsic(int ll, double *params, int NF, double *FF, double *TF, double *PF, double *AF);
void SetUp(int ll, double Tend, double *params, int NFmax, int *NFS, double *FF, double *TF, double *PF, double *AF);
void Extrinsic(double *params, double Tend, int NF, double *FF, double *TF, double *PF, double *AF, double *AAmp, double *EAmp, double *APhase, double *EPhase, double *kxm);
void de_jump(double *paramsx, double *paramsy, double **history, int m, int d, gsl_rng *r);
double det(double **A, int N);
double Tmerger(double *params, double t);

